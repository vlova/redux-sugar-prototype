{"version":3,"sources":["store/todos/index.ts","store/todos/actions.ts","common/redux/fancyActions/internals.ts","common/redux/index.ts","common/fields/index.ts","common/redux/fancyActions/actions.ts","store/todos/selectors.ts","ui/TodoListView.module.css","ui/TodoItemView.module.css","common/redux/fancyActions/index.ts","common/redux/fancyActions/createActionMap.ts","common/redux/fancyActions/createReducer.ts","store/todos/fields.ts","common/ui/CheckboxField.tsx","common/ui/TextField.tsx","common/redux/generateId.ts","common/uuid.ts","common/ui/index.tsx","ui/TodoItemToggleView.module.css","common/react-redux/useAction.ts","ui/TodoItemToggleView.tsx","ui/TodoItemView.tsx","ui/TodoListView.tsx","ui/App.tsx","store/buildStore.ts","index.tsx"],"names":["TodoActions","initialState","itemIds","idToItem","Map","id","item","state","get","assert","generateId","this","push","set","text","isCompleted","field","value","length","splice","indexOf","delete","Actions","todoActions","createActionMap","todoReducer","createReducer","getPossibleActionHandlers","actions","methods","prototype","Object","getOwnPropertyNames","filter","property","getPrototypeOf","getActionType","actionsType","methodName","name","makeEntityFields","def","response","fieldDef","makeSelector","params","makeUpdateAction","paramsToPayload","fields","useField","selector","useMemo","useSelector","dispatch","useDispatch","useCallback","getTodoState","todos","getTodoItems","getTodoItem","isLastItem","module","exports","mappedActions","key","actionType","actionDefinition","Error","type","payload","is","action","actionTypeToMethodNameMap","methodNames","map","getActionMap","produce","draftState","newDraftState","undefined","todoItemFields","updateFieldUnsafe","TextField","React","forwardRef","props","ref","onChange","e","target","r","chars","split","uuid","rnd","Math","random","i","join","useAction","TodoItemToggleView","className","classNames","styles","toggle","checked","TodoItemView","isLast","addNew","add","deleteItem","updateText","updateIsCompleted","handleKeyDown","ctrlKey","shiftKey","autoFocusRef","inputEl","focus","classnames","todoItem","tabIndex","onKeyDown","TodoListView","items","todoListContainer","onClick","todoItems","store","createStore","combineReducers","devToolsEnhancer","serialize","trace","AppView","useEffect","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.f2630211.chunk.js","sourcesContent":["export * from './state';\nexport { todoActions } from './actions';\nexport * from './selectors';\nexport * from './fields';","import { Actions, createActionMap, createReducer, generateId } from \"../../common/redux\";\nimport { assert } from 'ts-essentials';\nimport { TodoState, TodoId, TodoItem } from \"./state\";\n\nclass TodoActions extends Actions<TodoState> {\n    initialState: TodoState = {\n        itemIds: [],\n        idToItem: new Map(),\n    };\n\n    add() {\n        const id = generateId<TodoId>();\n        this.state.itemIds.push(id);\n        this.state.idToItem.set(id, {\n            id: generateId<TodoId>(),\n            text: '',\n            isCompleted: false\n        });\n    }\n\n    updateFieldUnsafe({ id, field, value }: {\n        id: TodoId,\n        field: 'text' | 'isCompleted',\n        value: TodoItem[typeof field]\n    }) {\n        const item = this.#findItem(id);\n        (item as any)[field] = value;\n    }\n\n    delete({ id }: { id: TodoId }) {\n        if (this.state.itemIds.length === 1) {\n            const item = this.#findItem(id);\n            item.text = '';\n            item.isCompleted = false;\n        } else {\n            this.state.itemIds.splice(this.state.itemIds.indexOf(id), 1);\n            this.state.idToItem.delete(id);\n        }\n    }\n\n    #findItem = (id: TodoId) => {\n        const item = this.state.idToItem.get(id);\n        assert(item != null, \"item not found\");\n        return item;\n    }\n}\n\nexport const todoActions = createActionMap(TodoActions);\nexport const todoReducer = createReducer(TodoActions);","import { Type } from \"../../typescript\";\nimport { Actions } from \"./actions\";\n\nexport function getPossibleActionHandlers<TActions extends Actions<unknown>>(\n    actions: TActions\n): string[] {\n    let methods: string[] = [];\n    let prototype: any = actions;\n    while (prototype instanceof Actions) {\n        methods = [\n            ...methods,\n            ...Object.getOwnPropertyNames(prototype)\n                // TODO: it would be nice to filter out private properties\n                //       but they are introduced by shitty https://babeljs.io/docs/en/babel-plugin-proposal-private-methods\n                .filter(property => property !== 'constructor')\n                // eslint-disable-next-line no-loop-func\n                .filter(property => typeof prototype[property] === 'function')\n        ];\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n\n    return methods;\n}\n\nexport function getActionType(actionsType: Type<any>, methodName: string) {\n    return actionsType.name + '/' + methodName;\n}","export * from \"./fancyActions\";\nexport * from \"./generateId\";\n","import { Action } from \"redux\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useCallback, useMemo } from \"react\";\n\nexport type FieldDefinition<TParams, TValue> = {\n    makeSelector: (params: TParams) => (state: any) => TValue;\n    makeUpdateAction: (params: TParams) => (value: TValue) => Action;\n}\n\nexport function makeEntityFields<\n    TEntity, TParams,\n    TPayload,\n    TWantedKey extends keyof TEntity\n>(def: {\n    makeSelector: (params: TParams) => (state: any) => TEntity | undefined;\n    paramsToPayload: (params: TParams) => TPayload,\n    makeUpdateAction: (p: { field: TWantedKey, value: any } & TPayload) => Action;\n    fields: TWantedKey[]\n}): { [P in TWantedKey]: FieldDefinition<TParams, TEntity[P]> } {\n    const response: any = {};\n    for (const field of def.fields) {\n        const fieldDef = makeFieldDefinition({\n            makeSelector: (params: TParams) => state => def.makeSelector(params)(state)?.[field],\n            makeUpdateAction: (params: TParams) => value => def.makeUpdateAction({\n                ...def.paramsToPayload(params),\n                field,\n                value\n            })\n        });\n\n        response[field] = fieldDef;\n    }\n\n    return response;\n}\n\nexport function makeFieldDefinition<TParams, TValue>(def: FieldDefinition<TParams, TValue>) {\n    return def;\n}\n\nexport function useField<TParams, TValue>(\n    def: FieldDefinition<TParams, TValue>, params: TParams\n): [TValue, (value: TValue) => void] {\n    const selector = useMemo(\n        () => def.makeSelector(params),\n        [def, params]);\n\n    const value = useSelector(selector);\n    const dispatch = useDispatch();\n    const updateValue = useCallback(\n        (value: TValue) => dispatch(def.makeUpdateAction(params)(value)),\n        [def, params, dispatch]\n    );\n\n    return [value, updateValue];\n}","import { Draft } from \"immer\";\nimport { DeepReadonly } from \"ts-essentials\";\n\nexport abstract class Actions<TState> {\n    protected state!: Draft<TState>;\n    abstract readonly initialState: DeepReadonly<TState>;\n}\n","import { TodoState, TodoId } from \"./state\";\n\nconst getTodoState = (state: any) => state.todos as TodoState;\n\nexport const getTodoItems = (state: any) =>\n    getTodoState(state).itemIds;\n\nexport const getTodoItem = (id: TodoId) => (state: any) =>\n    getTodoState(state).idToItem.get(id);\n\nexport const isLastItem = (id: TodoId) => (state: any) =>\n    getTodoState(state).itemIds[getTodoState(state).itemIds.length - 1] === id;\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListContainer\":\"TodoListView_todoListContainer__3NbU2\",\"addNew\":\"TodoListView_addNew__2_xxl\",\"todoItems\":\"TodoListView_todoItems__ShaC3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"TodoItemView_todoItem__2A29D\",\"isCompleted\":\"TodoItemView_isCompleted__2aMM0\"};","export * from './actions';\nexport * from './createActionMap';\nexport * from './createReducer';\nexport * from './actionDefinition';\n","import { Action } from \"redux\";\nimport { Type } from \"../../typescript\";\nimport { NonNever } from \"ts-essentials\";\nimport { Actions } from \"./actions\";\nimport { getPossibleActionHandlers, getActionType } from \"./internals\";\nimport { ActionDefinition } from \"./actionDefinition\";\n\ntype MappedAction<TActionFunc>\n    = TActionFunc extends () => void\n    ? ActionDefinition<never>\n    : (TActionFunc extends (params: infer TParams) => void\n        ? ActionDefinition<TParams>\n        : (\n            TActionFunc extends (...args: any) => void\n            ? () => never\n            : never\n        )\n    );\n\ntype MappedActions<TActions extends Actions<unknown>>\n    = NonNever<{\n        readonly [P in keyof TActions]: MappedAction<TActions[P]>\n    }>;\n\nexport function createActionMap<TActions extends Actions<unknown>>(\n    actionsType: Type<TActions>\n): MappedActions<TActions> {\n    const mappedActions: any = {};\n\n    const actions = new actionsType() as any;\n    for (const key of getPossibleActionHandlers(actions)) {\n        const actionType = getActionType(actionsType, key);\n\n        const actionDefinition: any = (params: any, ...args: any[]) => {\n            if (args.length > 0) {\n                throw new Error('too much arguments');\n            }\n\n            return ({\n                type: actionType,\n                payload: params\n            })\n        };\n\n        actionDefinition.is = (action: Action) => action.type === actionType;\n\n        mappedActions[key] = actionDefinition;\n    }\n\n    return mappedActions;\n}","import { Reducer } from \"redux\";\nimport { Type } from \"../../typescript\";\nimport produce from \"immer\"\nimport { Actions } from \"./actions\";\nimport { getPossibleActionHandlers, getActionType } from \"./internals\";\n\ntype GetState<TActions> = TActions extends Actions<infer TState>\n    ? TState\n    : never;\n\nexport function createReducer<TActions extends Actions<TState>, TState>(\n    actionsType: Type<TActions>\n): Reducer<GetState<TActions>> {\n    const actions = new actionsType() as any;\n    const actionTypeToMethodNameMap = getActionMap(actions, actionsType);\n\n    return (state: TState = actions.initialState, action) => {\n        const methodName = actionTypeToMethodNameMap.get(action.type);\n        if (methodName == null) {\n            return state;\n        }\n\n        if (!(methodName in actions)) {\n            return state;\n        }\n\n        return produce(state, draftState => {\n            actions.state = draftState;\n            actions[methodName](action.payload);\n            const newDraftState = actions.state;\n            actions.state = undefined;\n            return newDraftState;\n        });\n    }\n}\n\nfunction getActionMap(actions: any, actionsType: Type<any>) {\n    const methodNames = getPossibleActionHandlers(actions);\n    return new Map(methodNames.map(methodName => [getActionType(actionsType, methodName), methodName]));\n}\n","import { makeEntityFields } from \"../../common/fields\";\nimport { getTodoItem } from \"./selectors\";\nimport { todoActions } from \"./actions\";\n\nexport const todoItemFields = makeEntityFields({\n    makeSelector: getTodoItem,\n    makeUpdateAction: todoActions.updateFieldUnsafe,\n    paramsToPayload: id => ({ id }),\n    fields: [\n        'text',\n        'isCompleted'\n    ]\n});\n\n","import React from \"react\";\nimport { InputFieldProps } from \"./InputFieldProps\";\n\nexport const CheckboxField = (props: InputFieldProps<boolean>) => (\n    <input\n        {...props}\n        type=\"checkbox\"\n        value={undefined}\n        checked={props.value}\n        onChange={e => props.onChange(e.target.checked, e)}\n    />\n);","import React from \"react\";\nimport { InputFieldProps } from \"./InputFieldProps\";\n\nexport const TextField = React.forwardRef((props: InputFieldProps<string>, ref: any) => (\n    <input\n        {...props}\n        type=\"text\"\n        value={props.value}\n        onChange={e => props.onChange(e.target.value, e)}\n        ref={ref}\n    />\n));","import { Opaque } from \"ts-essentials\";\nimport { uuid } from \"../uuid\";\n\nexport function generateId<T extends Opaque<string, string>>() {\n    return uuid() as T;\n}","export function uuid() {\n    var chars = '0123456789abcdef'.split('');\n\n    var uuid = [], rnd = Math.random, r;\n    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n    uuid[14] = '4'; // version 4\n\n    for (var i = 0; i < 36; i++) {\n        if (!uuid[i]) {\n            r = 0 | rnd() * 16;\n\n            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r & 0xf];\n        }\n    }\n\n    return uuid.join('');\n}\n","export * from './CheckboxField';\nexport * from './TextField';\nexport * from './InputFieldProps';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggle\":\"TodoItemToggleView_toggle__q8tv9\"};","import { ActionDefinition } from \"../redux\";\nimport { useDispatch } from \"react-redux\";\nimport { useCallback } from \"react\";\n\nexport function useAction(action: ActionDefinition<never>): () => void\nexport function useAction<TParams>(\n    action: ActionDefinition<TParams>\n): (params: TParams) => void\nexport function useAction(action: any) {\n    const dispatch = useDispatch();\n    return useCallback((...args: any[]) => dispatch(action(...args)), [dispatch, action]);\n}","import React from \"react\";\nimport { InputFieldProps } from \"../common/ui\";\nimport classNames from \"classnames\";\nimport styles from './TodoItemToggleView.module.css';\n\nexport const TodoItemToggleView = (props: InputFieldProps<boolean>) => (\n    <input\n        {...props}\n        className={classNames(props.className, styles.toggle)}\n        type=\"checkbox\"\n        value={undefined}\n        checked={props.value}\n        onChange={e => props.onChange(e.target.checked, e)}\n    />\n);","import React, { useCallback } from 'react';\nimport styles from './TodoItemView.module.css';\nimport { todoActions, TodoId, todoItemFields, isLastItem } from '../store/todos';\nimport { useAction } from '../common/react-redux';\nimport { TextField } from '../common/ui';\nimport { useField } from '../common/fields';\nimport classnames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { TodoItemToggleView } from './TodoItemToggleView';\n\nexport const TodoItemView = ({ id }: { id: TodoId }) => {\n    const isLast = useSelector(isLastItem(id));\n\n    const addNew = useAction(todoActions.add);\n    const deleteItem = useAction(todoActions.delete);\n    const [text, updateText] = useField(todoItemFields.text, id);\n    const [isCompleted, updateIsCompleted] = useField(todoItemFields.isCompleted, id);\n\n    const handleKeyDown = useCallback(\n        (e: React.KeyboardEvent) => {\n            if (e.key === 'Enter' && e.ctrlKey) {\n                updateIsCompleted(!isCompleted);\n                return;\n            }\n\n            if (e.key === 'Enter' && !e.ctrlKey && !e.shiftKey) {\n                if (isLast) {\n                    addNew();\n                }\n\n                return;\n            }\n\n            if ((e.key === 'Delete' || e.key === 'Backspace') && e.ctrlKey) {\n                deleteItem({ id });\n                return;\n            }\n        },\n        [updateIsCompleted, isCompleted, isLast, addNew, deleteItem, id]\n    );\n\n    const autoFocusRef = useCallback(inputEl => {\n        if (inputEl !== null && isLast) {\n            inputEl.focus();\n        }\n    }, [isLast]);\n\n    return (\n        <div className={classnames(styles.todoItem, { [styles.isCompleted]: isCompleted })}>\n            <TodoItemToggleView value={isCompleted} onChange={updateIsCompleted} tabIndex={-1} />\n            <TextField value={text} onChange={updateText} onKeyDown={handleKeyDown} ref={autoFocusRef} />\n        </div>);\n}\n","import React, {  } from 'react';\nimport styles from './TodoListView.module.css';\nimport { useSelector } from 'react-redux';\nimport { getTodoItems, todoActions } from '../store/todos';\nimport { useAction } from '../common/react-redux';\nimport { TodoItemView } from './TodoItemView';\n\nexport const TodoListView = () => {\n    const items = useSelector(getTodoItems);\n    const addNew = useAction(todoActions.add);\n\n    return (\n        <div className={styles.todoListContainer}>\n            <button onClick={addNew} className={styles.addNew} tabIndex={-1}>+</button>\n            <div className={styles.todoItems}>\n                {items.map(id => <TodoItemView key={id} id={id} />)}\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport { buildStore } from '../store/buildStore';\nimport { todoActions } from '../store/todos';\nimport { TodoListView } from './TodoListView';\n\nconst store = buildStore();\n\nconst AppView = () => {\n  useEffect(() => {\n    store.dispatch(todoActions.add())\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <TodoListView />\n    </Provider>\n  );\n}\n\n\nexport default AppView;\n","import { createStore, combineReducers } from \"redux\";\nimport { todoReducer } from \"./todos/actions\";\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\nexport function buildStore() {\n    return createStore(\n        combineReducers({\n            todos: todoReducer\n        }),\n        devToolsEnhancer({\n            serialize: true,\n            trace: true,\n        }));\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}